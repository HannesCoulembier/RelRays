#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38

layout(binding = 0) uniform CameraBlockAndScene {

    mat4 view;
    mat4 proj;
    mat4 invView;
    mat4 invProj;
    float uTime;
    int frameIndex;
} cameraAndScene;

struct Sphere {
    
    vec3 Pos;
    float Radius;
    int MaterialIndex;
};

layout(std140, binding = 1) readonly buffer SphereBlock {

    Sphere spheres[];
};

struct Material {
	vec3 Albedo;
	float Roughness;
	float Metallic;
	vec3 EmissionColor;
	float EmissionPower;
};

layout(std140, binding = 2) readonly buffer MaterialBlock {
    
    Material materials[];
};

layout (binding = 3, rgba8) uniform image2D colorBuffer;

struct Ray {
    vec3 Origin;
    vec3 Direction;
};

struct HitPayload {
    
    float HitDistance;
    vec3 WorldPos;
    vec3 WorldNormal;
    int ObjectIndex;
};

HitPayload TraceRay(Ray ray);
HitPayload ClosestHit(Ray ray, float hitDistance, int sphereIndex);
HitPayload Miss(Ray ray);

void main() {

    ivec2 screenPos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 screenSize = imageSize(colorBuffer);

	vec2 uv = vec2(float(screenPos.x) / float(screenSize.x), float(screenPos.y) / float(screenSize.y)); // uv with 0,0 in bottom left corner
	vec2 coord = uv * 2.0f - 1.0f; // -1 -> 1

    // Scene stuff
    vec3 lightDirection = normalize(vec3(5.0, 1.0, 0.0));
    vec3 lightColor = vec3(1.0f);
    vec3 cameraPos = vec3(cameraAndScene.view[3][0], cameraAndScene.view[3][1], cameraAndScene.view[3][2]);

    // Ray trace stuff
	vec3 light = vec3(0.0);
	vec3 contribution = vec3(0.8);

    Ray ray;
    ray.Origin = cameraPos;
    vec4 target = cameraAndScene.invProj * vec4(coord.x, coord.y, 1, 1);
    ray.Direction = vec3(cameraAndScene.invView * vec4(normalize(vec3(target) / target.w), 0)); // World space

    // TEST --------
    vec3 testColor = vec3(0.0);
    float testReflectance = 1.0;
    // END TEST ----

    int bounces = 10;
	for (int i = 0; i < bounces; i++) {

		HitPayload payload = TraceRay(ray);
		if (payload.HitDistance < 0.0) { // HitDistance < 0.0 means it missed
            
            light += vec3(0.1, 0.2, 0.9);
            testColor += vec3(0.1, 0.2, 0.4) * testReflectance;
			break;
        }

        Sphere sphere = spheres[payload.ObjectIndex];
        Material mat = materials[sphere.MaterialIndex];
        
		contribution *= mat.Albedo;

        // TEST --------
        testColor += (1.0-mat.Metallic) * testReflectance * mat.Albedo;
        testColor += (1.0-mat.Metallic) * testReflectance * lightColor * dot(lightDirection, payload.WorldNormal);
        testReflectance *= mat.Metallic;
        // END TEST ----

		// light += mat.EmissionColor * mat.EmissionPower;
        // light += mat.Albedo * (dot(lightDirection, payload.WorldNormal));

		ray.Origin = payload.WorldPos + payload.WorldNormal * 0.0001f;
		// ray.Direction = normalize(RandomVecInUnitSphere() + payload.WorldNormal);
        ray.Direction = normalize(reflect(ray.Direction, payload.WorldNormal));
	}

    // vec3 prevColor = imageLoad(colorBuffer, screenPos).xyz;
    // vec3 finalColor = (float(cameraAndScene.frameIndex) * prevColor + light)/float(cameraAndScene.frameIndex+1);
    
    vec3 finalColor = testColor;
    imageStore(colorBuffer, screenPos, vec4(finalColor, 1.0));
    // imageStore(colorBuffer, screenPos, cameraAndScene.frameIndex * vec4(1.0, 1.0, 0.0, 1.0)/10000.0);
}

HitPayload TraceRay(Ray ray) {

	int closestSphere = -1;
	float hitDistance = FLT_MAX;

	for (int i = 0; i < spheres.length(); i++) {
        
        Sphere sphere = spheres[i];

        vec3 origin = ray.Origin - sphere.Pos;

	    float a = dot(ray.Direction, ray.Direction);
	    float b = 2.0f * dot(ray.Direction, origin);
	    float c = dot(origin, origin) - sphere.Radius * sphere.Radius;

	    float discriminant = b * b - 4 * a * c;

	    if (discriminant < 0)
		    continue;
	
	    float t = (-b - sqrt(discriminant)) / (2.0f * a);
	    
        if (t > 0.0f && t < hitDistance) {
            hitDistance = t;
	        closestSphere = i;
        }
    }
    
	if (closestSphere < 0) {
		return Miss(ray);
    }

	return ClosestHit(ray, hitDistance, closestSphere);
}

HitPayload Miss(Ray ray) {
    
    HitPayload payload;
    payload.HitDistance = -1.0;
    return payload;
}

HitPayload ClosestHit(Ray ray, float hitDistance, int sphereIndex) {
    
    Sphere sphere = spheres[sphereIndex];

    HitPayload payload;

	payload.HitDistance = hitDistance;
	vec3 origin = ray.Origin - sphere.Pos;
	vec3 relPos = origin + ray.Direction * hitDistance;
	payload.WorldPos = relPos + sphere.Pos;
	payload.WorldNormal = normalize(relPos);
    payload.ObjectIndex = sphereIndex;

    return payload;
}